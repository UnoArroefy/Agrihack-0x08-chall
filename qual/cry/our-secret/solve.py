from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Util.number import long_to_bytes
import random
import hashlib


# DH parameters
g = 2
p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
A = 814309311447363244353476275457624199431622995838124628551925186987361915074541271290440805922738800853414529514467221308976838831372327097584595697398783760554672911141760605496542697469735385711765857494102013583304092033044576869084413327985115065229317832975566425303782239404375631624511270809130269608984677162531903068508790522530299388325233816477448459310373299662268513054981626403346956482698037672549001091772072796916365705241288461758612393682332175

# b and B (kalau mau di-automate pake pwntools, b nya generate random aja)
# b = random.getrandbits(1530)
# B = pow(g,b,p)	# send to server, get flag

b = 25176951062163831311352961212712580892473011321608742146111312931301530262815913271457648938845544575765005469111449430273439659278989150530651523563001930812841097895322684973760038815405636095240264956738417970813565947144256624359738654533552260932856004182888736611486894324521730420876621011961097642702386078020566095683151797267978333129699855735922886574803028529610532804944295402053261185444491322470883118024162550472233027622534855033227312265679135
B = 1390351585471575171856448410571069606634003947878402747918091871184992098246014528517301996028705113778605351446323723994198031977551870573257122580853909837923763119511410544386544951839086021992869121122258854079676345319361906558885992835178787056944257493252584127573857268449344623957922785729002952078444825021922103567034599603265152432095277496211578136032659628608685813365527596722803363475529351439282920530981435038909359478139436379183601769847104143

# calculate shared secret
secret = pow(A,b,p)

# decryption example
iv = bytes.fromhex('ba2773a1e62cb2103a1cadd6ecdacd7e')
enc = bytes.fromhex('1a6fb94ce5e05f1e2a159cc6e433c6859984583dc7413a0ad0a2392a890d894e860ff9d7680699d6bc14281ed4a39ac84f085f93df77b194a225f9c36742f4490149fd738dce2fb35d3d4e69f254a676')

def decrypt(msg, shared_secret, iv):
	# derive key
	key = hashlib.md5(long_to_bytes(shared_secret)).digest()
	# decrypt
	cipher = AES.new(key, AES.MODE_CBC, iv)
	plaintext = cipher.decrypt(msg)
	plaintext = unpad(plaintext, 16)
	return plaintext

print(decrypt(enc, secret, iv))