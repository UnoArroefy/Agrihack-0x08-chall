from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Util.number import long_to_bytes
import random
import hashlib


# DH parameters
g = 2
p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919

# Dapat A dari Alice
A = 1268799936771357525514154961843967068682860565746487259631584086136129746464208969847465396231358834780980700943640578476991482707014980465869506691269299260522105106631822363735256189040738003981526804375014124800436809865895953457661431477052754397199082648304719193141804885981687595198210259819153964300086732062159772089262568943812980128212779803134151041355410453954673678661478665193310065450758215098847155997896024376536780670077862229916114627749779103

# b and B (kalau mau di-automate pake pwntools, b nya generate random aja)
# b = random.getrandbits(1530)
# B = pow(g,b,p)

b = 25176951062163831311352961212712580892473011321608742146111312931301530262815913271457648938845544575765005469111449430273439659278989150530651523563001930812841097895322684973760038815405636095240264956738417970813565947144256624359738654533552260932856004182888736611486894324521730420876621011961097642702386078020566095683151797267978333129699855735922886574803028529610532804944295402053261185444491322470883118024162550472233027622534855033227312265679135
B = 1390351585471575171856448410571069606634003947878402747918091871184992098246014528517301996028705113778605351446323723994198031977551870573257122580853909837923763119511410544386544951839086021992869121122258854079676345319361906558885992835178787056944257493252584127573857268449344623957922785729002952078444825021922103567034599603265152432095277496211578136032659628608685813365527596722803363475529351439282920530981435038909359478139436379183601769847104143

# calculate shared secret
secret = pow(A,b,p)

# decryption example
iv = bytes.fromhex('d6b2eadccd8ad0f989b9408a54267f9d')
enc = bytes.fromhex('624c51e4f014dd4606ccbf6b5cacd270ad01b30cba78ccf202a025fd2e166b84fc299081f5aa1a7f65150509b9de27ec3ef929ec472daec72d593b257c67171bfd1fa30ce836cfb80e097525dba71b57')

def decrypt(msg, shared_secret, iv):
	# derive key
	key = hashlib.md5(long_to_bytes(shared_secret)).digest()
	# decrypt
	cipher = AES.new(key, AES.MODE_CBC, iv)
	plaintext = cipher.decrypt(msg)
	plaintext = unpad(plaintext, 16)
	return plaintext

print(decrypt(enc, secret, iv))